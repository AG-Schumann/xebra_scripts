;;
;   Configuration for Nikhef lab H037
;   Created 4 October 2016
;   Updated for Xebra at Freiburg June 2018
;;

[pax]
plugin_group_names = ['input', 'processing','output']

look_for_config_in_runs_db = False

logging_level = 'INFO'
print_timing_report = True

plugin_paths = ['/scratch/xebra_scripts/pax_plugins']

processing = ['CheckPulses.SortPulses',
              'PulseProperties.PulseProperties',
              #'CheckPulses.ConcatenateAdjacentPulses',
              'CheckPulses.CheckBoundsAndCount',

              'HitFinder.FindHits',
              #'HitfinderDiagnosticPlots.HitfinderDiagnosticPlots',

              'SumWaveform.SumWaveform',

              'BuildPeaks.GapSizeClustering',
              'LocalMinimumClustering.LocalMinimumClustering',
              'LocalMinimumClustering.TailSeparation',

              'BasicProperties.BasicProperties',
              'BasicProperties.SumWaveformProperties',
              'BasicProperties.CountCoincidentNoisePulses',

              # Something posrec here
              'WeightedSum.PosRecWeightedSum',
              #'RobustWeightedMean.PosRecRobustWeightedMean',
              #'MaxPMT.PosRecMaxPMT',

              'XAMSClassification.XAMSClassification',

              'BuildInteractions.BuildInteractions',
              ]


[DEFAULT]
pmt_0_is_fake = False
tpc_name = "xebra"
tpc_radius = 35 * mm # TODO correct?
tpc_length = 70 * mm

run_number = 0

channels_top = list(range(1, 7+1))
channels_bottom = [0]
channels_in_detector = {
    'tpc':   list(range(0, 7+1))
    }
n_channels = 8
outer_ring_pmts = list(range(1,6+1))

# TODO fix
gains = [6e6, 6e6, 6e6, 6e6, 6e6, 6e6, 6e6, 6e6]


; CAEN V1724 used by XENON100 and XENON1T
sample_duration = int(10 * ns)      # int is necessary for data structure
digitizer_voltage_range = 2.25 * V
digitizer_bits = 14
pmt_circuit_load_resistor = 50 * Ohm
external_amplification = 1

digitizer_reference_baseline = 16000 # TODO fix?
drift_velocity_liquid = 1.5 * um / ns
drift_time_gate = 1.5 * us

pmts = [{'array': 'bottom',
         'pmt_position': 0,
         'position': {'x': 0, 'y': 0},
         'hv_channel' : 7,
         'box_channel' : 7,
         'serial' : ''},
        {'array': 'top',
         'pmt_position': 1,
         'position': {'x': -1.25, 'y': -2.165},
         'hv_channel' : 2,
         'box_channel' : 1,
         'serial' : 'lv1413'},
        {'array': 'top',
         'pmt_position': 2,
         'position': {'x': -2.5, 'y': 0},
         'hv_channel' : 10,
         'box_channel': 0,
         'serial' : 'lv1421'},
        {'array': 'top',
         'pmt_position': 3,
         'position': {'x': -1.25, 'y': 2.165},
         'hv_channel': 4,
         'box_channel' : 5,
         'serial' : 'lv1405'},
        {'array': 'top',
         'pmt_position': 4,
         'position': {'x': 1.25, 'y': 2.165},
         'hv_channel': 3,
         'box_channel' : 2,
         'serial' : 'lv1418'},
        {'array': 'top',
         'pmt_position': 5,
         'position': {'x': 2.5, 'y': 0},
         'hv_channel': 8,
         'box_channel' : 6,
         'serial' : 'lv1371'},
        {'array': 'top',
         'pmt_position': 6,
         'position': {'x': 1.25, 'y': -2.165},
         'hv_channel': 6,
         'box_channel' : 3,
         'serial' : 'lv1388'},
        {'array': 'top',
         'pmt_position': 7,
         'position': {'x': 0, 'y': 0},
         'hv_channel': 16,
         'box_channel' : 4,
         'serial' : 'lv1439'}]


[Zip.WriteZipped]
ignore_existing_dir = True      # Makes sure the trigger monitor data file does not get deleted


[BuildInteractions.BuildInteractions]
pair_n_s1s = 3
pair_n_s2s = 5
s2_pairing_threshold = 200
xy_posrec_preference = ['PosRecWeightedSum']

[RobustWeightedMean.PosRecRobustWeightedMean]
outlier_threshold = 2.5
outer_ring_multiplication_factor = 1.0
min_pmts_left = 3


[PulseProperties]

baseline_samples = 16

[HitFinder]
# For detailed description of what these settings do, see the documentation / plugin docstring.

# Compute baseline on first n samples in pulse:
initial_baseline_samples = 16

# Max hits to look for in each pulse: rest will be ignored
max_hits_per_pulse = 100

# Threshold 1: Height / noise.
height_over_noise_threshold = 5

# Threshold 2: Absolute ADC counts above baseline
absolute_adc_counts_threshold = 3   # ADC counts

# Threshold 3:  - Height / minimum
height_over_min_threshold = 0

# Raise low threshold temporarily to fraction of hit height for rest of pulse
dynamic_low_threshold_coeff = 0

left_extension = 30 * ns
right_extension = 200 * ns


[HitfinderDiagnosticPlots]
# Diagnostic plots settings
make_diagnostic_plots = 'never'     # Can be always, never, tricky cases, no hits, hits only, saturated, baseline shifts
make_diagnostic_plots_in = 'hitfinder_diagnostic_plots'
# Add extra information to diagnostic plots - this gives info on sum of hits in one pulse
diagnostic_plot_info = 'yes' # can be yes or no


[SumWaveform.SumWaveform]
# If true, the 'tpc_raw', 'veto_raw' sum waveforms will be constructed WITHOUT subtracting the baseline correction
# Useful to see effect of baseline correction
# Note the raw sum waveform is for cosmetic (plotting) purposes only,
# it isn't (and shouldn't) be used for anything else
subtract_reference_baseline_only_for_raw_waveform = False


[BuildPeaks.GapSizeClustering]
# Start a new cluster / peak if a gap larger than this is encountered
# see [note tbd]
max_gap_size_in_cluster = 2.50 * us
max_gap_size_in_s1like_cluster = 350 * ns
s1_risetime_threshold = 70 * ns
s1_width_threshold = 300 * ns


[LocalMinimumClustering]
min_height = 50  #pe
min_ratio = 4
tail_cutoff_ratio = 0.005


[BasicProperties.SumWaveformProperties]
# Length of the peak sum waveform field.
# Must be an even multiple of sample size, pax will add 1 sample width so there is a clear center.
peak_waveform_length = 2.5 * us
tight_coincidence_window_left = 50 * ns
tight_coincidence_window_right = 50 * ns


[CheckPulses.CheckBoundsAndCount]
truncate_pulses_partially_outside = True
allow_pulse_completely_outside = True


[BSON]
# By default, BSON-type formats are used for raw data
fields_to_ignore = ['all_hits',
                    'sum_waveforms',
                    'channel_waveforms',]
compresslevel = 4


[Zip]
events_per_file = 100000


[Table.TableWriter]
output_format = 'hdf5'      # hdf5, csv, numpy, html, json, root

append_data = False
overwrite_data = True
string_data_length = 32

# Convert data to numpy records every n events
# These take less memory, but conversion takes some time
buffer_size = 16

# Write to file every time a chunk is converted to records
# If false, or output format does not support it, will write all at end
write_in_chunks = True

# Fields to leave out of the output.
# If you dump to e.g. json, you may want to ignore area_per_channel and does_channel_contribute
# You must ignore at least one of 'all_hits' (event field) or 'hits' (peak field)
# 'sum waveforms' must always be ignored
fields_to_ignore = ['sum_waveforms',
                    'channel_waveforms',
                    #'all_hits',
                    'raw_data',
                    'hits',
                    'pulses',]

##
# Plotting settings
##
[Plotting]
waveforms_to_plot = (
        {'internal_name': 'tpc',      'plot_label': 'TPC (hits only)',
                    'drawstyle': 'steps', 'color':'black'},
        {'internal_name': 'tpc_raw',  'plot_label': 'TPC (raw)',
         'drawstyle': 'steps', 'color':'black', 'alpha': 0.3},
    )
output_name = 'plots'  # Output directory for plots. If SCREEN, will show plot in interactive GUI display.
plot_format = 'png'    # Can be pdf or png. No effect if output_dir is set.
plot_every = 1         # Skip plot_every-1 waveforms after plotting one
size_multiplier = 4    # Increase/decrease to get bigger/smaller plots

log_scale_entire_event = False
log_scale_s2 = True
log_scale_s1 = False
annotation_filter = None

[Plotting.PlotEventSummary]
plot_largest_peaks = True      # On the top row, show zoom-ins of the largest S1, S2, and their hitpatterns

[Plotting.PlotChannelWaveforms3D]
log_scale = False

[Plotting.PeakViewer]
# Which peak should we show first? Can be 'largest', 'first', 'main_s1', 'main_s2'
# If the selection is impossible (e.g. you asked for main_s1 but there are no s1s in the event)
# the largest peak will be shown first.
starting_peak = 'largest'

# Select specific peaks to plot per event like this:
# starting_peak_per_event = {'event_number': left boundary of peak, ...}


